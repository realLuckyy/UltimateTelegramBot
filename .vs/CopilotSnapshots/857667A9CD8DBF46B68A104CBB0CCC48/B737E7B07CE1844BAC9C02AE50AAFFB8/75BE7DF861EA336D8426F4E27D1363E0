# 🔧 Detailed Setup Guide

This guide walks you through setting up the Ultimate Telegram Bot step by step.

## 📋 Prerequisites

### System Requirements
- **Operating System**: Windows, macOS, or Linux
- **Python**: Version 3.8 or higher
- **Internet Connection**: Required for Telegram API communication
- **Telegram Account**: To create and manage the bot

### Check Python Installation
```bash
python --version
# or
python3 --version
```
If Python is not installed, download it from [python.org](https://python.org/downloads/).

## 🤖 Creating Your Telegram Bot

### Step 1: Start BotFather
1. Open Telegram on any device
2. Search for `@BotFather` or visit https://t.me/botfather
3. Click "Start" to begin conversation

### Step 2: Create New Bot
1. Send the command: `/newbot`
2. **Choose a name** for your bot (this can be anything):
   ```
   Example: Ultimate Community Bot
   ```
3. **Choose a username** for your bot (must end with 'bot'):
   ```
   Example: ultimate_community_bot
   ```

### Step 3: Get Your Token
After creating the bot, BotFather will send you a message containing:
- Your bot's token (keep this secret!)
- A link to your bot

**Example token format:**
```
123456789:ABCdefGHIjklMNOpqrsTUVwxyz-123456789
```

⚠️ **IMPORTANT**: Never share your bot token publicly!

### Step 4: Configure Bot Settings (Optional)

#### Set Description
```
/setdescription
```
Choose your bot, then send:
```
A comprehensive community bot with gamification, economy system, and engagement features.
```

#### Set About Text
```
/setabouttext
```
Choose your bot, then send:
```
Ultimate Telegram Bot - Gamification & Community Management
🎮 XP & Levels | 💰 Economy | 🏆 Achievements | 🤝 Referrals
```

#### Set Commands
```
/setcommands
```
Choose your bot, then send:
```
help - Show available commands
rules - Display group rules  
profile - Show user profile
level - Show XP and level
coins - Show coin balance
streak - Show posting streak
achievements - Show achievements
badges - Show available badges
stats - Show daily statistics
top - Today's top posters
leaderboard - Weekly leaderboard
ranking - All-time rankings
reactions - Weekly reactions
challenges - Weekly challenges
shop - Browse shop items
title - Manage titles
referral - Referral system
chatid - Show chat ID
```

## 💻 Bot Installation

### Step 1: Download the Code

#### Option A: Clone from GitHub
```bash
git clone https://github.com/yourusername/ultimate-telegram-bot.git
cd ultimate-telegram-bot
```

#### Option B: Download ZIP
1. Download the repository as ZIP
2. Extract to your desired folder
3. Open terminal in that folder

### Step 2: Install Dependencies

#### Using pip (recommended)
```bash
pip install -r requirements.txt
```

#### Using pip3 (if Python 3 is not default)
```bash
pip3 install -r requirements.txt
```

#### Manual Installation
If requirements.txt doesn't work, install manually:
```bash
pip install python-telegram-bot==20.7
pip install asyncio-throttle==1.0.2
pip install python-dateutil==2.8.2
pip install httpx==0.25.2
```

### Step 3: Configure the Bot

1. **Open the bot file**:
   - Open `UltimateTelegrambot.py` in any text editor
   - Find line 25: `TOKEN = "place_token_here"`

2. **Replace with your token**:
   ```python
   TOKEN = "123456789:ABCdefGHIjklMNOpqrsTUVwxyz-123456789"
   ```

3. **Save the file**

## 🚀 Running the Bot

### Start the Bot
```bash
python UltimateTelegrambot.py
```

If successful, you should see:
```
Bot started! Press Ctrl+C to stop.
```

### Keep Bot Running
The bot needs to run continuously. Options:

#### Option 1: Keep Terminal Open
- Leave the terminal window open
- Bot stops when you close terminal or press Ctrl+C

#### Option 2: Background Process (Linux/macOS)
```bash
nohup python UltimateTelegrambot.py &
```

#### Option 3: Windows Service
Use tools like NSSM to run as a Windows service.

#### Option 4: Cloud Hosting
Deploy to services like:
- Heroku
- Railway
- PythonAnywhere
- DigitalOcean
- AWS EC2

## 👥 Adding Bot to Group

### Step 1: Create or Choose Group
- Create a new Telegram group or use existing one
- Make sure you're an administrator

### Step 2: Add the Bot
1. In your group, click the group name at the top
2. Click "Add Members" or "Invite to Group"
3. Search for your bot's username
4. Add the bot to the group

### Step 3: Make Bot Administrator
1. Go to group settings → Administrators
2. Click "Add Administrator"
3. Select your bot
4. Grant these permissions:
   - ✅ Delete Messages
   - ✅ Ban Users
   - ✅ Invite Users
   - ✅ Pin Messages (optional)
   - ✅ Manage Video Chats (optional)

### Step 4: Test the Bot
Send `/help` in the group. The bot should respond with the help menu.

## ⚙️ Configuration Options

### Basic Settings (in UltimateTelegrambot.py)

#### New Member Policy
```python
NEW_MEMBER_POST_WINDOW = timedelta(hours=1)      # Time limit for new members
NEW_MEMBER_WARN_BEFORE = timedelta(minutes=15)   # Warning before removal
```

#### Inactivity Policy
```python
INACTIVITY_WARN_AT = timedelta(hours=48)         # Warning after 48h
INACTIVITY_KICK_AT = timedelta(hours=72)         # Removal after 72h
CHECK_INTERVAL = timedelta(minutes=15)           # How often to check
```

#### Economy Settings
```python
COIN_DAILY_POST = 10                            # Coins per post
COIN_STREAK_BONUS = 5                           # Streak bonus
COIN_REACTION_RECEIVED = 2                      # Coins per reaction
COIN_REFERRAL_SIGNUP = 50                       # Referral bonus
```

#### Content Points
```python
PTS_PHOTO = 1                                   # Points for photos
PTS_VIDEO = 1                                   # Points for videos
PTS_DOC = 1                                     # Points for documents
PTS_LINK = 1                                    # Points for links
```

### Advanced Customization

#### Modify Achievements
Edit the `Ach` class to add new achievements:
```python
class Ach:
    FirstPost = "🎉 First Post"
    CustomAchievement = "⭐ Your Custom Achievement"
```

#### Add New Shop Items
Add items to `SHOP_ITEMS` dictionary:
```python
"my_item": {
    "name": "🎁 My Item",
    "description": "Custom item description",
    "price": 100,
    "type": "boost",
    "emoji": "🎁"
}
```

#### Create New Commands
Add new command functions:
```python
async def cmd_mycustom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await reply_in_same_topic(update, "Custom command response!")

# Register in main():
application.add_handler(CommandHandler("mycustom", cmd_mycustom))
```

## 🔧 Troubleshooting

### Common Issues

#### Bot Doesn't Respond
1. **Check token**: Ensure token is correct and properly set
2. **Check internet**: Bot needs internet connection
3. **Check permissions**: Bot needs admin rights in group
4. **Check logs**: Look for error messages in terminal

#### "Module not found" Error
```bash
# Install missing modules
pip install python-telegram-bot
```

#### Bot Stops Working
1. **Check terminal**: Look for error messages
2. **Restart bot**: Stop (Ctrl+C) and start again
3. **Check API limits**: Telegram has rate limits
4. **Update dependencies**: `pip install -r requirements.txt --upgrade`

#### Permission Errors
1. **Make bot admin**: Bot needs administrator permissions
2. **Check group type**: Works best in supergroups
3. **Verify permissions**: Enable required permissions in admin settings

### Debug Mode
Add debug logging to see what's happening:
```python
import logging
logging.basicConfig(level=logging.INFO)
```

### Getting Help
1. **Check error messages**: Read terminal output carefully
2. **Test commands**: Use `/chatid` to verify bot is working
3. **Check bot status**: Verify with BotFather (`/mybots`)
4. **Review permissions**: Ensure all required permissions are granted

## 📊 Monitoring and Maintenance

### Regular Maintenance
- **Monitor logs**: Check for errors regularly
- **Update dependencies**: Keep libraries updated
- **Backup data**: Currently in-memory (consider database)
- **Monitor usage**: Watch for performance issues

### Performance Tips
- **Restart periodically**: Prevents memory issues
- **Monitor memory**: In-memory storage grows over time
- **Use database**: For persistent storage (future update)
- **Rate limiting**: Built-in protection against spam

## 🔄 Updates and Upgrades

### Updating the Bot
1. **Backup current version**: Copy your modified files
2. **Download new version**: Get latest code
3. **Restore configuration**: Copy your token and settings
4. **Test thoroughly**: Verify all features work
5. **Deploy update**: Replace old version

### Migration Notes
- Currently uses in-memory storage
- Data is lost when bot restarts
- Future versions will include database support
- Plan for data migration when upgrading

---

**Need more help?** Check the main [README.md](../README.md) or create an issue on GitHub.