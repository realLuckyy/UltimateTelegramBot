# 📖 Contributing to Ultimate Telegram Bot

Thank you for your interest in contributing to the Ultimate Telegram Bot! This document provides guidelines and information for contributors.

## 🤝 How to Contribute

### Reporting Issues
Before creating an issue, please:
1. Search existing issues to avoid duplicates
2. Use the issue templates when available
3. Provide detailed information about the problem
4. Include steps to reproduce bugs
5. Specify your environment (OS, Python version, etc.)

### Suggesting Features
We welcome feature suggestions! Please:
1. Check if the feature already exists
2. Explain the use case and benefits
3. Provide mockups or examples if applicable
4. Consider backward compatibility

### Code Contributions

#### Prerequisites
- Python 3.8 or higher
- Basic understanding of Telegram Bot API
- Familiarity with async/await programming
- Understanding of the bot's architecture

#### Development Setup
1. **Fork the repository**
   ```bash
   git clone https://github.com/realLuckyy/UltimateTelegramBot.git
   cd UltimateTelegramBot
   ```

2. **Create a virtual environment**
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

3. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   pip install pytest pytest-asyncio flake8 black
   ```

4. **Create a feature branch**
   ```bash
   git checkout -b feature/your-feature-name
   ```

#### Code Style Guidelines

##### Python Style
- Follow PEP 8 guidelines
- Use Black for code formatting: `black UltimateTelegrambot.py`
- Use meaningful variable and function names
- Add docstrings for functions and classes
- Keep functions focused and small

##### Code Organization
```python
# Good: Clear function with docstring
async def grant_achievement(context, chat_id, user_id, achievement_name):
    """Grant an achievement to a user and notify the chat.
    
    Args:
        context: Telegram context object
        chat_id: Chat identifier
        user_id: User identifier  
        achievement_name: Name of the achievement to grant
    """
    # Implementation here
```

##### Error Handling
```python
# Good: Proper error handling
try:
    await context.bot.send_message(chat_id, message)
except Exception as e:
    logger.error(f"Failed to send message: {e}")
    # Handle gracefully
```

##### Documentation
- Update relevant documentation files
- Add comments for complex logic
- Update API.md for new commands
- Update FEATURES.md for new features

#### Testing

##### Manual Testing
1. **Setup test bot**: Create a test bot with BotFather
2. **Test environment**: Use a test group for validation
3. **Test scenarios**: Cover normal and edge cases
4. **Performance testing**: Ensure no memory leaks or performance issues

##### Automated Testing
```bash
# Run syntax checks
python -c "import ast; ast.parse(open('UltimateTelegrambot.py').read())"

# Run linting
flake8 UltimateTelegrambot.py

# Format code
black UltimateTelegrambot.py
```

#### Pull Request Process

1. **Ensure tests pass**: All checks must be green
2. **Update documentation**: Keep docs up to date
3. **Describe changes**: Use clear commit messages
4. **Link issues**: Reference related issues
5. **Request review**: Tag maintainers for review

##### Pull Request Template
```markdown
## Description
Brief description of changes

## Type of Change
- [ ] Bug fix
- [ ] New feature
- [ ] Documentation update
- [ ] Performance improvement
- [ ] Code refactoring

## Testing
- [ ] Manual testing completed
- [ ] All checks pass
- [ ] Documentation updated

## Screenshots (if applicable)
Include screenshots or GIFs of new features

## Related Issues
Fixes #123
```

## 🎯 Development Guidelines

### Architecture Principles

#### State Management
- Use in-memory dictionaries for current implementation
- Plan for future database integration
- Keep data structures consistent and well-documented
- Handle data cleanup properly

#### Async Programming
- Use async/await properly
- Handle exceptions in async functions
- Use proper error handling for network operations
- Respect Telegram API rate limits

#### Modular Design
- Keep functions focused on single responsibility
- Use helper functions for common operations
- Separate concerns (UI, logic, data)
- Make code reusable and maintainable

### Adding New Features

#### New Commands
1. **Create command function**:
   ```python
   async def cmd_newcommand(update: Update, context: ContextTypes.DEFAULT_TYPE):
       """Handle /newcommand"""
       # Implementation
       await reply_in_same_topic(update, "Response")
   ```

2. **Register command**:
   ```python
   # In main() function
   application.add_handler(CommandHandler("newcommand", cmd_newcommand))
   ```

3. **Update help text**:
   ```python
   HELP_TEXT = (
       "🤖 <b>Bot Commands</b>\n\n"
       # ... existing commands ...
       "🆕 /newcommand → Description of new command\n"
   )
   ```

4. **Document in API.md**:
   ```markdown
   #### `/newcommand`
   **Description**: What the command does
   **Usage**: `/newcommand [parameters]`
   **Permissions**: Who can use it
   ```

#### New Achievements
1. **Add to achievements class**:
   ```python
   class Ach:
       NewAchievement = "🎯 New Achievement"
   ```

2. **Add checking logic**:
   ```python
   async def check_new_achievement(context, chat_id, user_id):
       if condition_met:
           await grant_ach(context, chat_id, user_id, Ach.NewAchievement, 
                          "🎯 <b>New Achievement</b> — description!")
   ```

3. **Integrate checking**: Call in appropriate places

#### New Shop Items
1. **Add to shop items**:
   ```python
   SHOP_ITEMS["new_item"] = {
       "name": "🎁 New Item",
       "description": "Item description",
       "price": 100,
       "type": "boost",  # or "cosmetic", "protection", etc.
       "emoji": "🎁"
   }
   ```

2. **Add purchase logic**: Handle in `cmd_shop` function

3. **Add usage mechanics**: Implement item effects

### Database Integration (Future)

When implementing database support:

#### Database Design
- User profiles table
- Achievement tracking table  
- Shop inventory table
- Activity history table
- Referral relationships table

#### Migration Plan
- Maintain backward compatibility
- Provide data migration scripts
- Support both in-memory and database modes
- Gradual migration approach

## 🔧 Development Tools

### Recommended IDE Setup
- **VS Code** with Python extension
- **PyCharm** Community or Professional
- Configure linting and formatting
- Use type hints where beneficial

### Useful Tools
- **Black**: Code formatting
- **Flake8**: Linting and style checking
- **Bandit**: Security vulnerability scanning
- **pytest**: Testing framework

### Environment Variables
For development, consider using environment variables:
```python
import os
TOKEN = os.getenv('BOT_TOKEN', 'place_token_here')
```

## 📋 Contribution Checklist

Before submitting a pull request:

### Code Quality
- [ ] Code follows style guidelines
- [ ] No syntax or logical errors
- [ ] Error handling is proper
- [ ] Code is well-documented
- [ ] No hardcoded values where inappropriate

### Testing
- [ ] Manual testing completed
- [ ] All existing functionality still works
- [ ] Edge cases considered
- [ ] Performance impact assessed

### Documentation
- [ ] README.md updated if needed
- [ ] API.md updated for new commands
- [ ] FEATURES.md updated for new features
- [ ] Code comments added for complex logic

### Git Hygiene
- [ ] Commit messages are clear
- [ ] Branch is up to date with main
- [ ] No merge conflicts
- [ ] Logical commit organization

## 🎖️ Recognition

Contributors will be recognized in:
- Repository contributors list
- Release notes for significant contributions  
- Special achievements in the bot (if applicable)

## 💬 Communication

### Getting Help
- Create an issue for questions
- Join discussions in existing issues
- Be respectful and constructive
- Provide context and details

### Code Reviews
- Be open to feedback
- Explain your design decisions
- Respond to review comments promptly
- Learn from the review process

## 📜 License

By contributing to this project, you agree that your contributions will be licensed under the MIT License.

---

Thank you for contributing to the Ultimate Telegram Bot! Your efforts help make this project better for everyone. 🚀