# 🚀 Deployment Guide

Complete guide for deploying the Ultimate Telegram Bot in various environments.

## 📋 Deployment Options

### 1. Local Development
**Best for**: Testing and development

#### Quick Start
```bash
git clone https://github.com/realLuckyy/UltimateTelegramBot.git
cd UltimateTelegramBot
pip install -r requirements.txt
python setup.py  # Interactive setup
python UltimateTelegrambot.py
```

#### Requirements
- Python 3.8+
- Stable internet connection
- Telegram bot token

---

### 2. VPS/Dedicated Server
**Best for**: Production deployment with full control

#### Ubuntu/Debian Setup
```bash
# Update system
sudo apt update && sudo apt upgrade -y

# Install Python and dependencies
sudo apt install python3 python3-pip python3-venv git -y

# Clone repository
git clone https://github.com/realLuckyy/UltimateTelegramBot.git
cd UltimateTelegramBot

# Create virtual environment
python3 -m venv venv
source venv/bin/activate

# Install dependencies
pip install -r requirements.txt

# Configure bot
python setup.py
```

#### Running as System Service
Create systemd service file:

```bash
sudo nano /etc/systemd/system/telegram-bot.service
```

```ini
[Unit]
Description=Ultimate Telegram Bot
After=network.target

[Service]
Type=simple
User=botuser
WorkingDirectory=/home/botuser/UltimateTelegramBot
Environment=PATH=/home/botuser/UltimateTelegramBot/venv/bin
ExecStart=/home/botuser/UltimateTelegramBot/venv/bin/python UltimateTelegrambot.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
```

Enable and start service:
```bash
sudo systemctl daemon-reload
sudo systemctl enable telegram-bot.service
sudo systemctl start telegram-bot.service
sudo systemctl status telegram-bot.service
```

#### Process Management with PM2 (Alternative)
```bash
# Install PM2
npm install -g pm2

# Create ecosystem file
cat > ecosystem.config.js << 'EOF'
module.exports = {
  apps: [{
    name: 'telegram-bot',
    script: 'UltimateTelegrambot.py',
    interpreter: 'python3',
    cwd: '/path/to/UltimateTelegramBot',
    env: {
      NODE_ENV: 'production'
    },
    instances: 1,
    autorestart: true,
    watch: false,
    max_memory_restart: '1G',
    error_file: './logs/err.log',
    out_file: './logs/out.log',
    log_file: './logs/combined.log',
    time: true
  }]
};
EOF

# Start with PM2
pm2 start ecosystem.config.js
pm2 startup
pm2 save
```

---

### 3. Docker Deployment
**Best for**: Containerized environments and easy scaling

#### Basic Docker Setup
Create `Dockerfile`:
```dockerfile
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY UltimateTelegrambot.py .
COPY setup.py .

# Create non-root user
RUN useradd -m -u 1000 botuser && chown -R botuser:botuser /app
USER botuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('https://api.telegram.org')" || exit 1

CMD ["python", "UltimateTelegrambot.py"]
```

Create `docker-compose.yml`:
```yaml
version: '3.8'

services:
  telegram-bot:
    build: .
    container_name: ultimate-telegram-bot
    restart: unless-stopped
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
    volumes:
      - bot-logs:/app/logs
    networks:
      - bot-network
    
  # Optional: Redis for caching (future enhancement)
  redis:
    image: redis:7-alpine
    container_name: bot-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - bot-network

volumes:
  bot-logs:
  redis-data:

networks:
  bot-network:
    driver: bridge
```

#### Running with Docker
```bash
# Build and run
docker-compose up --build -d

# View logs
docker-compose logs -f telegram-bot

# Stop
docker-compose down
```

#### Environment Variables
Create `.env` file:
```env
BOT_TOKEN=your_bot_token_here
REDIS_URL=redis://redis:6379
LOG_LEVEL=INFO
```

---

### 4. Heroku Deployment
**Best for**: Quick deployment with managed infrastructure

#### Setup Files
Create `Procfile`:
```
worker: python UltimateTelegrambot.py
```

Create `runtime.txt`:
```
python-3.11.4
```

#### Deployment Steps
```bash
# Install Heroku CLI
# Login to Heroku
heroku login

# Create app
heroku create your-telegram-bot

# Set config vars
heroku config:set BOT_TOKEN=your_token_here

# Deploy
git add .
git commit -m "Deploy to Heroku"
git push heroku main

# Scale worker
heroku ps:scale worker=1

# View logs
heroku logs --tail
```

#### Heroku Configuration
- Add to `requirements.txt` any additional dependencies
- Bot will restart every 24 hours (free tier limitation)
- Use Heroku Postgres for database (future enhancement)

---

### 5. Railway Deployment
**Best for**: Modern deployment platform with GitHub integration

#### Setup
1. Connect GitHub repository to Railway
2. Add environment variable: `BOT_TOKEN`
3. Railway auto-detects Python and deploys
4. Monitor through Railway dashboard

#### Configuration
Create `railway.json`:
```json
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "startCommand": "python UltimateTelegrambot.py",
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}
```

---

### 6. AWS EC2 Deployment
**Best for**: Enterprise deployment with AWS services

#### EC2 Setup
```bash
# Launch EC2 instance (Ubuntu 22.04 LTS)
# Connect via SSH

# Update and install dependencies
sudo apt update
sudo apt install python3 python3-pip git supervisor -y

# Clone and setup bot
git clone https://github.com/realLuckyy/UltimateTelegramBot.git
cd UltimateTelegramBot
pip3 install -r requirements.txt

# Configure bot
python3 setup.py
```

#### Supervisor Configuration
Create `/etc/supervisor/conf.d/telegram-bot.conf`:
```ini
[program:telegram-bot]
directory=/home/ubuntu/UltimateTelegramBot
command=/usr/bin/python3 UltimateTelegrambot.py
autostart=true
autorestart=true
stderr_logfile=/var/log/telegram-bot.err.log
stdout_logfile=/var/log/telegram-bot.out.log
user=ubuntu
environment=HOME="/home/ubuntu",USER="ubuntu"
```

```bash
# Start supervisor
sudo supervisorctl reread
sudo supervisorctl update
sudo supervisorctl start telegram-bot
```

#### Security Group Rules
- Allow outbound HTTPS (443) for Telegram API
- Allow SSH (22) for management
- No inbound rules needed for bot

---

### 7. DigitalOcean Droplet
**Best for**: Affordable VPS with good performance

#### One-Click Setup Script
Create `deploy.sh`:
```bash
#!/bin/bash
set -e

echo "🚀 Ultimate Telegram Bot - DigitalOcean Deployment"

# Update system
apt update && apt upgrade -y

# Install dependencies
apt install python3 python3-pip python3-venv git nginx certbot python3-certbot-nginx -y

# Create bot user
useradd -m -s /bin/bash botuser
usermod -aG sudo botuser

# Setup bot
su - botuser << 'EOF'
git clone https://github.com/realLuckyy/UltimateTelegramBot.git
cd UltimateTelegramBot
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
EOF

echo "✅ Deployment complete!"
echo "Next steps:"
echo "1. su - botuser"
echo "2. cd UltimateTelegramBot && source venv/bin/activate"
echo "3. python setup.py"
echo "4. python UltimateTelegrambot.py"
```

Run deployment:
```bash
chmod +x deploy.sh
sudo ./deploy.sh
```

---

## 🔧 Production Configuration

### Environment Variables
```bash
# Required
export BOT_TOKEN="your_telegram_bot_token"

# Optional
export LOG_LEVEL="INFO"
export MAX_WORKERS="4"
export WEBHOOK_URL="https://yourdomain.com/webhook"
export PORT="8080"
```

### Logging Configuration
Create `logging.conf`:
```ini
[loggers]
keys=root,telegram_bot

[handlers]
keys=consoleHandler,fileHandler

[formatters]
keys=simpleFormatter

[logger_root]
level=INFO
handlers=consoleHandler,fileHandler

[logger_telegram_bot]
level=INFO
handlers=consoleHandler,fileHandler
qualname=telegram_bot
propagate=0

[handler_consoleHandler]
class=StreamHandler
level=INFO
formatter=simpleFormatter
args=(sys.stdout,)

[handler_fileHandler]
class=FileHandler
level=INFO
formatter=simpleFormatter
args=('bot.log',)

[formatter_simpleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
```

### Monitoring & Alerting

#### Health Check Endpoint
Add to bot code:
```python
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'OK')

def start_health_check_server():
    server = HTTPServer(('0.0.0.0', 8080), HealthCheckHandler)
    server.serve_forever()

# Start in thread
threading.Thread(target=start_health_check_server, daemon=True).start()
```

#### Uptime Monitoring
Use services like:
- UptimeRobot
- Pingdom  
- StatusCake
- Monitor your health endpoint

### Backup Strategy

#### Configuration Backup
```bash
#!/bin/bash
# backup.sh
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backup/telegram-bot/$DATE"

mkdir -p $BACKUP_DIR

# Backup configuration
cp UltimateTelegrambot.py $BACKUP_DIR/
cp requirements.txt $BACKUP_DIR/
cp -r docs/ $BACKUP_DIR/

# Future: Backup database
# pg_dump telegram_bot > $BACKUP_DIR/database.sql

# Compress
tar -czf "/backup/telegram-bot-$DATE.tar.gz" $BACKUP_DIR
rm -rf $BACKUP_DIR

echo "Backup completed: telegram-bot-$DATE.tar.gz"
```

### SSL/TLS Configuration (If using webhooks)
```bash
# Let's Encrypt SSL
certbot --nginx -d yourdomain.com

# Auto-renewal
echo "0 12 * * * /usr/bin/certbot renew --quiet" | crontab -
```

---

## 🔍 Troubleshooting

### Common Issues

#### Bot Not Responding
```bash
# Check if process is running
ps aux | grep python
systemctl status telegram-bot

# Check logs
journalctl -u telegram-bot -f
tail -f /var/log/telegram-bot.out.log
```

#### Memory Issues
```bash
# Monitor memory usage
htop
free -h

# Set memory limits in systemd
[Service]
MemoryLimit=512M
```

#### Network Issues
```bash
# Test Telegram API connectivity
curl https://api.telegram.org/botTOKEN/getMe

# Check firewall
ufw status
iptables -L
```

### Performance Optimization

#### System Tuning
```bash
# Increase file limits
echo "* soft nofile 65536" >> /etc/security/limits.conf
echo "* hard nofile 65536" >> /etc/security/limits.conf

# Optimize network settings
echo "net.core.somaxconn = 65536" >> /etc/sysctl.conf
sysctl -p
```

#### Bot Optimization
- Implement connection pooling
- Add caching for frequent queries
- Optimize database queries (future)
- Use async operations properly

---

## 📊 Monitoring

### System Metrics
Monitor these key metrics:
- CPU usage
- Memory consumption  
- Disk I/O
- Network traffic
- Process uptime

### Bot Metrics
Track these bot-specific metrics:
- Messages processed per minute
- Command usage statistics
- Error rates
- User activity patterns
- API response times

### Alerting Rules
Set up alerts for:
- Process crashes
- High memory usage (>80%)
- API errors
- Long response times
- Disk space low

---

This deployment guide provides multiple options to suit different needs, from simple local development to enterprise production deployments. Choose the option that best fits your requirements and scale as needed.